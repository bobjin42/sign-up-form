{"version":3,"sources":["pages/HomePage.jsx","redux/actionTypes.js","redux/actions.js","pages/EmailPage.jsx","pages/NamePage.jsx","pages/ConfirmationPage.jsx","components/App.jsx","serviceWorker.js","redux/reducer.js","redux/store.js","index.js"],"names":["HomePage","className","to","ActionTypes","setName","name","type","payload","setAge","age","setCurrentUser","clearForm","withRouter","props","emailFromStore","useSelector","state","email","passwordFromStore","password","dispatch","useDispatch","useState","emailValue","setEmailValue","passwordValue","setPasswordValue","showPassword","setShowPassword","onSubmit","e","preventDefault","history","push","htmlFor","id","value","onChange","target","onClick","nameFromStore","ageFromStore","nameValue","setNameValue","ageValue","setAgeValue","signUpCall","fetch","method","headers","Accept","body","JSON","stringify","then","r","json","data","catch","err","hasError","trim","window","alert","checkValidation","min","ConfirmationPage","currentUserFromStore","currentUser","App","path","exact","render","Boolean","location","hostname","match","INITIAL_STATE","errorMessage","reducer","action","store","createStore","composeWithDevTools","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"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","file":"static/js/main.e8858d7f.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function HomePage() {\n  return (\n    <section className=\"container\">\n      <Link to=\"/email\">\n        <button className=\"button button-large\">Sign Up</button>\n      </Link>\n    </section>\n  );\n}\n","export const ActionTypes = {\n  SET_EMAIL: \"SET_EMAIL\",\n  SET_PASSWORD: \"SET_PASSWORD\",\n  SET_NAME: \"SET_NAME\",\n  SET_AGE: \"SET_AGE\",\n  SET_ERROR_MESSAGE: \"SET_ERROR_MESSAGE\",\n  CLEAR_FORM: \"CLEAR_FORM\",\n  SET_CURRENT_USER: \"SET_CURRENT_USER\"\n};\n","import { ActionTypes } from \"./actionTypes\";\n\nexport const setEmail = email => ({\n  type: ActionTypes.SET_EMAIL,\n  payload: email\n});\n\nexport const setPassword = password => ({\n  type: ActionTypes.SET_PASSWORD,\n  payload: password\n});\n\nexport const setName = name => ({\n  type: ActionTypes.SET_NAME,\n  payload: name\n});\n\nexport const setAge = age => ({\n  type: ActionTypes.SET_AGE,\n  payload: age\n});\n\nexport const setErrorMessage = message => ({\n  type: ActionTypes.SET_ERROR_MESSAGE,\n  payload: message\n});\n\nexport const setCurrentUser = name => ({\n  type: ActionTypes.SET_CURRENT_USER,\n  payload: name\n});\n\nexport const clearForm = () => ({\n  type: ActionTypes.CLEAR_FORM\n});\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { setEmail, setPassword } from \"../redux/actions\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction EmailPage(props) {\n  //redux\n  const emailFromStore = useSelector(state => state.email);\n  const passwordFromStore = useSelector(state => state.password);\n  const dispatch = useDispatch();\n\n  //state\n  const [emailValue, setEmailValue] = useState(emailFromStore);\n  const [passwordValue, setPasswordValue] = useState(passwordFromStore);\n  const [showPassword, setShowPassword] = useState(false);\n\n  const handleEmailChange = e => {\n    setEmailValue(e.target.value);\n  };\n\n  const handlePasswordChange = e => {\n    setPasswordValue(e.target.value);\n  };\n\n  const handleShowPassword = e => {\n    e.preventDefault();\n    setShowPassword(!showPassword);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(setEmail(emailValue));\n    dispatch(setPassword(passwordValue));\n    props.history.push(\"/name\");\n  };\n\n  return (\n    <section className=\"container\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <div className=\"form-input-wrapper\">\n          <div className=\"form-input\">\n            <label htmlFor=\"sign-up-email\">Email</label>\n            <input\n              id=\"sign-up-email\"\n              type=\"email\"\n              name=\"email\"\n              value={emailValue}\n              onChange={handleEmailChange}\n            />\n          </div>\n          <div className=\"form-input\">\n            <label htmlFor=\"sign-up-password\">Password</label>\n            <input\n              id=\"sign-up-password\"\n              type={showPassword ? \"text\" : \"password\"}\n              name=\"password\"\n              value={passwordValue}\n              onChange={handlePasswordChange}\n            />\n          </div>\n        </div>\n        <div className=\"form-button-wrapper\">\n          <button className=\"button button-small\" onClick={handleShowPassword}>\n            {showPassword ? \"Hide Password\" : \"Show Password\"}\n          </button>\n          <button className=\"button button-small\">Next</button>\n        </div>\n      </form>\n    </section>\n  );\n}\n\nexport default withRouter(EmailPage);\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  setName,\n  setAge,\n  setErrorMessage,\n  clearForm,\n  setCurrentUser\n} from \"../redux/actions\";\nimport { withRouter } from \"react-router-dom\";\n\nfunction NamePage(props) {\n  //redux\n  const emailFromStore = useSelector(state => state.email);\n  const passwordFromStore = useSelector(state => state.password);\n  const nameFromStore = useSelector(state => state.name);\n  const ageFromStore = useSelector(state => state.age);\n  const dispatch = useDispatch();\n\n  //state\n  const [nameValue, setNameValue] = useState(nameFromStore);\n  const [ageValue, setAgeValue] = useState(ageFromStore);\n\n  const handleNameChange = e => {\n    setNameValue(e.target.value);\n  };\n\n  const handleAgeChange = e => {\n    setAgeValue(e.target.value);\n  };\n\n  const handleBack = e => {\n    e.preventDefault();\n    dispatch(setName(nameValue));\n    dispatch(setAge(ageValue));\n    props.history.push(\"/email\");\n  };\n\n  const signUpCall = () => {\n    fetch(\"https://www1.nyc.gov/signup\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        emailFromStore,\n        passwordFromStore,\n        nameFromStore,\n        ageFromStore\n      })\n    })\n      .then(r => r.json())\n      .then(data => {\n        //In real world, we will get a JWT token and automatically have the user signed in, clear the form input fields, and redirect to the confirmation page\n        dispatch(setCurrentUser(nameValue));\n        dispatch(clearForm());\n        props.history.push(\"/confirmation\");\n      })\n      .catch(err => {\n        //In real world, the error message should be aligned with the backend response message\n        dispatch(setErrorMessage(\"Sign Up Failed\"));\n\n        //In real world we should only put the code below in the .then block\n        dispatch(setCurrentUser(nameValue));\n        dispatch(clearForm());\n        props.history.push(\"/confirmation\");\n      });\n  };\n\n  const checkValidation = () => {\n    let hasError = false;\n    if (!emailFromStore.trim()) {\n      hasError = true;\n      window.alert(\"Email can not be blank\");\n    }\n    if (!passwordFromStore.trim()) {\n      hasError = true;\n      window.alert(\"Password can not be blank\");\n    }\n    if (!nameFromStore.trim()) {\n      hasError = true;\n      window.alert(\"Name can not be blank\");\n    }\n    if (!ageFromStore.trim()) {\n      hasError = true;\n      window.alert(\"Age can not be blank\");\n    }\n    return hasError;\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(setName(nameValue));\n    dispatch(setAge(ageValue));\n    if (checkValidation()) return;\n    signUpCall();\n  };\n\n  return (\n    <section className=\"container\">\n      <form className=\"form\" onSubmit={handleSubmit}>\n        <div className=\"form-input-wrapper\">\n          <div className=\"form-input\">\n            <label htmlFor=\"sign-up-name\">Name</label>\n            <input\n              id=\"sign-up-name\"\n              type=\"text\"\n              name=\"name\"\n              value={nameValue}\n              onChange={handleNameChange}\n            />\n          </div>\n          <div className=\"form-input\">\n            <label htmlFor=\"sign-up-age\">Age</label>\n            <input\n              id=\"sign-up-age\"\n              type=\"number\"\n              name=\"age\"\n              min=\"0\"\n              value={ageValue}\n              onChange={handleAgeChange}\n            />\n          </div>\n        </div>\n        <div className=\"form-button-wrapper\">\n          <button className=\"button button-small\" onClick={handleBack}>\n            Back\n          </button>\n          <button className=\"button button-small\">Submit</button>\n        </div>\n      </form>\n    </section>\n  );\n}\n\nexport default withRouter(NamePage);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport default function ConfirmationPage() {\n  //redux\n  const currentUserFromStore = useSelector(state => state.currentUser);\n\n  return (\n    <section className=\"container\">\n      <h1>Thank you {currentUserFromStore} for signing up!</h1>\n    </section>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport HomePage from \"../pages/HomePage\";\nimport EmailPage from \"../pages/EmailPage\";\nimport NamePage from \"../pages/NamePage\";\nimport ConfirmationPage from \"../pages/ConfirmationPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"background center\">\n        <Switch>\n          <Route path=\"/\" exact render={() => <HomePage />} />\n          <Route path=\"/home\" exact render={() => <HomePage />} />\n          <Route path=\"/email\" exact render={() => <EmailPage />} />\n          <Route path=\"/name\" exact render={() => <NamePage />} />\n          <Route\n            path=\"/confirmation\"\n            exact\n            render={() => <ConfirmationPage />}\n          />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ActionTypes } from \"./actionTypes\";\n\nconst INITIAL_STATE = {\n  email: \"\",\n  password: \"\",\n  name: \"\",\n  age: \"\",\n  errorMessage: \"\",\n  currentUser: \"\"\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case ActionTypes.SET_EMAIL:\n      return {\n        ...state,\n        email: action.payload\n      };\n    case ActionTypes.SET_PASSWORD:\n      return {\n        ...state,\n        password: action.payload\n      };\n    case ActionTypes.SET_NAME:\n      return {\n        ...state,\n        name: action.payload\n      };\n    case ActionTypes.SET_AGE:\n      return {\n        ...state,\n        age: action.payload\n      };\n    case ActionTypes.SET_ERROR_MESSAGE:\n      return {\n        ...state,\n        errorMessage: action.payload\n      };\n    case ActionTypes.SET_CURRENT_USER:\n      return {\n        ...state,\n        currentUser: action.payload\n      };\n    case ActionTypes.CLEAR_FORM:\n      return {\n        ...state,\n        email: \"\",\n        password: \"\",\n        name: \"\",\n        age: \"\"\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"./reducer\";\n\nconst store = createStore(reducer, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.scss\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}